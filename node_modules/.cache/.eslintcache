[{"/Users/laurenwest/code/cs124/src/index.js":"1","/Users/laurenwest/code/cs124/src/App.js":"2","/Users/laurenwest/code/cs124/src/reportWebVitals.js":"3","/Users/laurenwest/code/cs124/src/Lists.js":"4","/Users/laurenwest/code/cs124/src/MainPage.js":"5","/Users/laurenwest/code/cs124/src/Alert.js":"6"},{"size":530,"mtime":1634264083778,"results":"7","hashOfConfig":"8"},{"size":3805,"mtime":1636046244394,"results":"9","hashOfConfig":"8"},{"size":362,"mtime":1634264246477,"results":"10","hashOfConfig":"8"},{"size":3853,"mtime":1636046411370,"results":"11","hashOfConfig":"8"},{"size":2389,"mtime":1635830881915,"results":"12","hashOfConfig":"8"},{"size":1193,"mtime":1634263463168,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"1gvg007",{"filePath":"17","messages":"18","errorCount":0,"fatalErrorCount":0,"warningCount":16,"fixableErrorCount":0,"fixableWarningCount":0,"source":"19"},{"filePath":"20","messages":"21","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"22","messages":"23","errorCount":0,"fatalErrorCount":0,"warningCount":17,"fixableErrorCount":0,"fixableWarningCount":0,"source":"24"},{"filePath":"25","messages":"26","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"27","usedDeprecatedRules":"16"},{"filePath":"28","messages":"29","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"/Users/laurenwest/code/cs124/src/index.js",[],["30","31"],"/Users/laurenwest/code/cs124/src/App.js",["32","33","34","35","36","37","38","39","40","41","42","43","44","45","46","47"],"import './AlertApp.css';\nimport React, {useState} from \"react\";\nimport MainPage from './MainPage'\nimport Lists from \"./Lists\";\nimport firebase from \"firebase/compat\";\nimport {useCollection} from \"react-firebase-hooks/firestore\";\nimport {collection, doc, setDoc, query, where, getDoc, getDocs, updateDoc, deleteDoc} from \"firebase/firestore\";\nimport {generateUniqueID} from \"web-vitals/dist/modules/lib/generateUniqueID\";\n\nconst firebaseConfig = {\n    apiKey: \"AIzaSyCcQ6XCOvMIA7pHME4bWBgy_7OVy_7XErA\",\n    authDomain: \"cs124-fall2021.firebaseapp.com\",\n    projectId: \"cs124-fall2021\",\n    storageBucket: \"cs124-fall2021.appspot.com\",\n    messagingSenderId: \"264318304667\",\n    appId: \"1:264318304667:web:4be8d27a02811b1ccd613e\"\n};\nfirebase.initializeApp(firebaseConfig);\nconst db = firebase.firestore();\n\nfunction App() {\n\n    const collectionName = \"lewing-hmc-tasks\"\n    const query = db.collection(collectionName);\n    const [hasFetchedTask, setFetch] = useState(false);\n    let collectionRef = db.collection(collectionName)\n    const [value, loading, error] = useCollection(query)\n    if (!loading) {\n        value.docs.map(async (x) => console.log((await getDoc(x.ref)).data().title))\n    }\n\n    const data = loading === false ? value.docs.map((element)=> element.data()) : []\n\n    const [showAlert, setShowAlert] = useState(false);\n    const [showEditAlert, setShowEditAlert] = useState(false);\n    let [listId, setListId] = useState(0);\n    let [selectedPage, setPage] = useState({\n        type: \"home\"\n    })\n\n    function handleAddList(listName) {\n        const List = {\n            id: generateUniqueID(),\n            title: listName,\n        }\n        collectionRef.doc(List.id).set(List)\n    }\n\n\n    function handleDeleteList(id, e){\n        collectionRef.doc(id).delete()\n        e.stopPropagation()\n    }\n\n    function setFetchAndPage(){\n        setFetch(false);\n        setPage({type: \"home\"});\n    }\n\n    function addListItem(list, itemName){\n        const Task = {\n            id: generateUniqueID(),\n            title: itemName,\n            completed: false\n        }\n        list.collection(list.id).doc(Task.id).set(Task)\n        setFetch(false)\n    }\n\n    async function getDocInfo(id){\n        let currTasks = [];\n        const q = collectionRef.doc(id).collection(id);\n        const querySnapshot = await getDocs(q);\n        querySnapshot.forEach((doc) => {\n            currTasks.push([doc.data().id, doc.data().title, doc.data().completed]);\n        });\n        return currTasks;\n    }\n\n    async function updateTask(listid, taskid, title_val, comp_value){\n        await collectionRef.doc(listid)\n            .collection(listid)\n            .doc(taskid)\n            .update({\n                title: title_val,\n                completed: comp_value,\n            });\n        setFetch(false)\n    }\n\n    async function deleteTask(listid, taskid){\n        await collectionRef.doc(listid).collection(listid).doc(taskid).delete();\n        setFetch(false)\n\n    }\n\n    const pageRenderLookup = {\n        \"home\": (\n                <MainPage handleDelete={handleDeleteList} setData={handleAddList} data={data} onListClick={(n) =>\n                    setPage({\n                    type: \"list\",\n                    selectedId: n\n                })}/>\n        ),\n        \"list\": (\n            <>\n                <img onClick={() => setFetchAndPage()} src={\"long-arrow-alt-left-solid.svg\"} className={\"back-arrow\"}/>\n                <Lists deleteTask={deleteTask} updateTask={updateTask} setFetch={setFetch} fetch={hasFetchedTask} getDocInfo={getDocInfo} addListItem={addListItem} data={data.filter((x) => x.id == selectedPage.selectedId)} list={collectionRef.doc(selectedPage.selectedId) }/>\n            </>\n        )\n    }\n    return pageRenderLookup[selectedPage.type]\n}\n\nexport default App;\n","/Users/laurenwest/code/cs124/src/reportWebVitals.js",[],"/Users/laurenwest/code/cs124/src/Lists.js",["48","49","50","51","52","53","54","55","56","57","58","59","60","61","62","63","64"],"import \"./main.css\"\nimport React, {useEffect, useState, useMemo} from \"react\";\nimport Alert from \"./Alert\";\nimport {useCollection} from \"react-firebase-hooks/firestore\";\nimport {collection, doc, setDoc, query, where, getDoc, getDocs} from \"firebase/firestore\";\nimport firebase from \"firebase/compat\";\n\nfunction ShowEditAlert(props) {\n    props.setCurrentTask(props.listitem.id)\n    props.setShowEditAlert(true)\n}\n\nfunction ListsItemDisplay(props){\n    console.log(props.currentTasks);\n    const [checked, setChecked] = useState(props.completed); //useState(props.listitem.completed)\n    const [showAlert, setShowAlert] = useState(false);\n\n    function handleAlertOKListItem(listitem) {\n        props.updateTask(props.list.id, props.id, listitem, props.completed)\n        // props.listitem.text = listItemText;\n        // props.setData(Object.assign([], props.data))\n    }\n    function handleDelete(e) {\n        e.stopPropagation()\n        props.deleteTask(props.list.id, props.id)\n        // props.list.listItems = props.list.listItems.filter((item) => item.id !== props.id)\n        // props.setData(Object.assign([], props.data))\n    }\n\n    return (\n        <div id=\"box1\" className=\"boxes boxes-blue\">\n            <input checked={checked} type=\"checkbox\" onChange={() => {\n                props.updateTask(props.list.id, props.id, props.listitem, !props.completed)\n                // props.setData(Object.assign([], props.data))\n                console.log(\"add completed attribute\")\n            }}/>\n            <label>{props.listitem}</label><br/>\n            <div className={\"edit-delete-button-container\"}>\n            <img className=\"edit-delete-button\" onClick={() => setShowAlert(true)} src={\"edit-solid.svg\"}></img>\n            <img className=\"edit-delete-button\" onClick={(e) => handleDelete(e)} src={\"times-solid.svg\"}></img>\n            </div>\n            <Alert visible={showAlert} inputValue={props.listitem} onClose={() => setShowAlert(false)} onOk={handleAlertOKListItem} cancelName={\"Don't Edit Task\"} okName={\"Edit Task\"}>\n                <div>Edit Task:</div>\n            </Alert>\n        </div>\n    )\n}\n\nfunction Lists(props) {\n    const [showAlert, setShowAlert] = useState(false);\n    const [currentTasks, setTasks] = useState([]);\n\n    function updateListItems(newListItems) {\n        props.setData(props.data.map(list => {\n            if (list.id === props.list.id) {\n                list.listItems = newListItems\n            }\n            return list;\n        }))\n    }\n\n    if (!props.fetch) {\n        props.getDocInfo(props.list.id).then((x) => setTasks(x));\n        props.setFetch(true);\n    }\n\n    return (\n        <>\n            <h1>{props.data[0].title}</h1>\n            {currentTasks.filter((y) => !y[2]).map((x) => <ListsItemDisplay deleteTask={props.deleteTask} updateTask={props.updateTask} setTasks={setTasks} currentTasks={currentTasks} list={props.list} setData={props.setData} data={props.data} id={x[0]} listitem={x[1]} completed={x[2]}/>)}\n            <hr/>\n            <h3>Completed:</h3>\n            {currentTasks.filter((y) => y[2]).map((x) => <ListsItemDisplay deleteTask={props.deleteTask} updateTask={props.updateTask} setTasks={setTasks} currentTasks={currentTasks} list={props.list} setData={props.setData} data={props.data} id={x[0]} listitem={x[1]} completed={x[2]}/>)}\n            <div id=\"button1\">\n                <button onClick={() => {setShowAlert(true)}} className=\"addTask\">\n                    <img src=\"plus-solid.svg\"/>\n                    <span>Add Task</span>\n                </button>\n            </div>\n            <Alert visible={showAlert}  onClose={() => setShowAlert(false)} onOk={(input) => props.addListItem(props.list, input) } cancelName={\"Don't Add Task\"} okName={\"Add Task\"}>\n                <div>Add Task:</div>\n            </Alert>\n        </>\n    )\n}\n\nexport default Lists;","/Users/laurenwest/code/cs124/src/MainPage.js",["65","66","67","68"],"import './main.css'\nimport React, {useState} from \"react\";\nimport Alert from \"./Alert\";\n\nfunction ListsDisplay(props) {\n    const [showAlert, setShowAlert] = useState(false);\n    function handleAlertOK(listName) {\n        props.list.title = listName;\n        props.setData(Object.assign([], props.data))\n    }\n    // function handleDelete(e) {\n    //     e.stopPropagation()\n    //     props.setData(props.data.filter((list) => list.id !== props.list.id))\n    //\n    //\n    // }\n\n    return (\n        <>\n            <div onClick={() => props.onClick(props.list.id)} className=\"boxes\" id=\"list-box-1\">\n                <img src=\"list-solid.svg\"/>\n                <span>{props.list.title}</span>\n                <div className={\"edit-delete-button-container\"}>\n                    <img className=\"edit-delete-button\" onClick={(e) => {\n                        e.stopPropagation()\n                        setShowAlert(true)\n                    }} src={\"edit-solid.svg\"}/>\n                    <img className=\"edit-delete-button\" onClick={(e) => props.handleDelete(props.list.id, e)} src={\"times-solid.svg\"}></img>\n                {/*    (e) => props.handleDelete(e.target.id)*/}\n                </div>\n\n            </div>\n            <Alert inputValue={props.list.title} visible={showAlert} onClose={() => setShowAlert(false)} onOk={handleAlertOK} cancelName={\"Don't Edit List\"} okName={\"Edit List\"}>\n                <div>Edit List:</div>\n            </Alert>\n        </>\n    )\n}\n\nfunction MainPage(props) {\n    const [showAlert, setShowAlert] = useState(false);\n\n    function handleAlertOK(listName) {\n        props.setData(listName)\n    }\n\n    return (\n        <>\n            <h1 id=\"MyLists\">My Lists</h1>\n            {props.data.map((x) => <ListsDisplay handleDelete={props.handleDelete} setData={props.setData} data={props.data} list={x} onClick={props.onListClick}/>)}\n            <div id=\"button1\">\n                <button onClick={() => setShowAlert(true)} className=\"addList addTask\">\n                    <img src=\"plus-solid.svg\"/>\n                    <span>Add List</span>\n                </button>\n            </div>\n            <Alert inputValue={\"\"} visible={showAlert} onClose={() => setShowAlert(false)} onOk={handleAlertOK} cancelName={\"Don't Add List\"} okName={\"Add List\"}>\n                <div>Add List:</div>\n            </Alert>\n        </>\n    )\n}\n\nexport default MainPage;","/Users/laurenwest/code/cs124/src/Alert.js",[],{"ruleId":"69","replacedBy":"70"},{"ruleId":"71","replacedBy":"72"},{"ruleId":"73","severity":1,"message":"74","line":7,"column":9,"nodeType":"75","messageId":"76","endLine":7,"endColumn":19},{"ruleId":"73","severity":1,"message":"77","line":7,"column":21,"nodeType":"75","messageId":"76","endLine":7,"endColumn":24},{"ruleId":"73","severity":1,"message":"78","line":7,"column":26,"nodeType":"75","messageId":"76","endLine":7,"endColumn":32},{"ruleId":"73","severity":1,"message":"79","line":7,"column":34,"nodeType":"75","messageId":"76","endLine":7,"endColumn":39},{"ruleId":"73","severity":1,"message":"80","line":7,"column":41,"nodeType":"75","messageId":"76","endLine":7,"endColumn":46},{"ruleId":"73","severity":1,"message":"81","line":7,"column":65,"nodeType":"75","messageId":"76","endLine":7,"endColumn":74},{"ruleId":"73","severity":1,"message":"82","line":7,"column":76,"nodeType":"75","messageId":"76","endLine":7,"endColumn":85},{"ruleId":"73","severity":1,"message":"83","line":27,"column":28,"nodeType":"75","messageId":"76","endLine":27,"endColumn":33},{"ruleId":"73","severity":1,"message":"84","line":34,"column":12,"nodeType":"75","messageId":"76","endLine":34,"endColumn":21},{"ruleId":"73","severity":1,"message":"85","line":34,"column":23,"nodeType":"75","messageId":"76","endLine":34,"endColumn":35},{"ruleId":"73","severity":1,"message":"86","line":35,"column":12,"nodeType":"75","messageId":"76","endLine":35,"endColumn":25},{"ruleId":"73","severity":1,"message":"87","line":35,"column":27,"nodeType":"75","messageId":"76","endLine":35,"endColumn":43},{"ruleId":"73","severity":1,"message":"88","line":36,"column":10,"nodeType":"75","messageId":"76","endLine":36,"endColumn":16},{"ruleId":"73","severity":1,"message":"89","line":36,"column":18,"nodeType":"75","messageId":"76","endLine":36,"endColumn":27},{"ruleId":"90","severity":1,"message":"91","line":107,"column":17,"nodeType":"92","endLine":107,"endColumn":120},{"ruleId":"93","severity":1,"message":"94","line":108,"column":195,"nodeType":"95","messageId":"96","endLine":108,"endColumn":197},{"ruleId":"73","severity":1,"message":"97","line":2,"column":16,"nodeType":"75","messageId":"76","endLine":2,"endColumn":25},{"ruleId":"73","severity":1,"message":"98","line":2,"column":37,"nodeType":"75","messageId":"76","endLine":2,"endColumn":44},{"ruleId":"73","severity":1,"message":"99","line":4,"column":9,"nodeType":"75","messageId":"76","endLine":4,"endColumn":22},{"ruleId":"73","severity":1,"message":"74","line":5,"column":9,"nodeType":"75","messageId":"76","endLine":5,"endColumn":19},{"ruleId":"73","severity":1,"message":"77","line":5,"column":21,"nodeType":"75","messageId":"76","endLine":5,"endColumn":24},{"ruleId":"73","severity":1,"message":"78","line":5,"column":26,"nodeType":"75","messageId":"76","endLine":5,"endColumn":32},{"ruleId":"73","severity":1,"message":"79","line":5,"column":34,"nodeType":"75","messageId":"76","endLine":5,"endColumn":39},{"ruleId":"73","severity":1,"message":"80","line":5,"column":41,"nodeType":"75","messageId":"76","endLine":5,"endColumn":46},{"ruleId":"73","severity":1,"message":"100","line":5,"column":48,"nodeType":"75","messageId":"76","endLine":5,"endColumn":54},{"ruleId":"73","severity":1,"message":"101","line":5,"column":56,"nodeType":"75","messageId":"76","endLine":5,"endColumn":63},{"ruleId":"73","severity":1,"message":"102","line":6,"column":8,"nodeType":"75","messageId":"76","endLine":6,"endColumn":16},{"ruleId":"73","severity":1,"message":"103","line":8,"column":10,"nodeType":"75","messageId":"76","endLine":8,"endColumn":23},{"ruleId":"73","severity":1,"message":"104","line":15,"column":21,"nodeType":"75","messageId":"76","endLine":15,"endColumn":31},{"ruleId":"90","severity":1,"message":"91","line":39,"column":13,"nodeType":"92","endLine":39,"endColumn":107},{"ruleId":"90","severity":1,"message":"91","line":40,"column":13,"nodeType":"92","endLine":40,"endColumn":106},{"ruleId":"73","severity":1,"message":"105","line":53,"column":14,"nodeType":"75","messageId":"76","endLine":53,"endColumn":29},{"ruleId":"90","severity":1,"message":"91","line":76,"column":21,"nodeType":"92","endLine":76,"endColumn":48},{"ruleId":"90","severity":1,"message":"91","line":21,"column":17,"nodeType":"92","endLine":21,"endColumn":44},{"ruleId":"90","severity":1,"message":"91","line":24,"column":21,"nodeType":"92","endLine":27,"endColumn":48},{"ruleId":"90","severity":1,"message":"91","line":28,"column":21,"nodeType":"92","endLine":28,"endColumn":135},{"ruleId":"90","severity":1,"message":"91","line":53,"column":21,"nodeType":"92","endLine":53,"endColumn":48},"no-native-reassign",["106"],"no-negated-in-lhs",["107"],"no-unused-vars","'collection' is defined but never used.","Identifier","unusedVar","'doc' is defined but never used.","'setDoc' is defined but never used.","'query' is defined but never used.","'where' is defined but never used.","'updateDoc' is defined but never used.","'deleteDoc' is defined but never used.","'error' is assigned a value but never used.","'showAlert' is assigned a value but never used.","'setShowAlert' is assigned a value but never used.","'showEditAlert' is assigned a value but never used.","'setShowEditAlert' is assigned a value but never used.","'listId' is assigned a value but never used.","'setListId' is assigned a value but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'useEffect' is defined but never used.","'useMemo' is defined but never used.","'useCollection' is defined but never used.","'getDoc' is defined but never used.","'getDocs' is defined but never used.","'firebase' is defined but never used.","'ShowEditAlert' is defined but never used.","'setChecked' is assigned a value but never used.","'updateListItems' is defined but never used.","no-global-assign","no-unsafe-negation"]