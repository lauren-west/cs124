{"ast":null,"code":"var _jsxFileName = \"/Users/laurenwest/code/cs124/src/Lists.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport \"./main.css\";\nimport { Data } from \"./InMemoryApp\";\nimport React, { useEffect, useState, useMemo } from \"react\";\nimport Alert from \"./Alert\";\nimport { useCollection } from \"react-firebase-hooks/firestore\";\nimport { collection, doc, setDoc, query, where, getDoc, getDocs } from \"firebase/firestore\";\nimport firebase from \"firebase/compat\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction ShowEditAlert(props) {\n  props.setCurrentTask(props.listitem.id);\n  props.setShowEditAlert(true);\n}\n\n_c = ShowEditAlert;\n\nasync function readASingleDocument(docname) {\n  const mySnapshot = await getDoc(docname);\n\n  if (mySnapshot.exists()) {\n    const docData = mySnapshot.data();\n    return docData;\n  }\n\n  return 0;\n}\n\nfunction ListsItemDisplay(props) {\n  _s();\n\n  console.log(props.currentTasks);\n  const [checked, setChecked] = useState(props.completed); //useState(props.listitem.completed)\n\n  const [showAlert, setShowAlert] = useState(false);\n\n  function handleAlertOKListItem(listItemText) {\n    props.listitem.text = listItemText;\n    props.setData(Object.assign([], props.data));\n  } // function handleDelete(e) {\n  //     e.stopPropagation()\n  //     props.list.listItems = props.list.listItems.filter((item) => item.id !== props.id)\n  //     props.setData(Object.assign([], props.data))\n  // }\n\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"box1\",\n    className: \"boxes boxes-blue\",\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      checked: checked,\n      type: \"checkbox\",\n      onChange: () => {\n        // props.listitem.completed = !props.listitem.completed\n        // setChecked(props.listitem.completed)\n        // props.setData(Object.assign([], props.data))\n        console.log(\"add completed attribute\");\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n      children: props.listitem\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 44\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"edit-delete-button-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"img\", {\n        className: \"edit-delete-button\",\n        onClick: () => setShowAlert(true),\n        src: \"edit-solid.svg\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n        className: \"edit-delete-button\",\n        onClick: e => props.handleTaskDelete(e),\n        src: \"times-solid.svg\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Alert, {\n      visible: showAlert,\n      inputValue: props.listitem,\n      onClose: () => setShowAlert(false),\n      onOk: handleAlertOKListItem,\n      cancelName: \"Don't Edit Task\",\n      okName: \"Edit Task\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        children: \"Edit Task:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 40,\n    columnNumber: 9\n  }, this);\n}\n\n_s(ListsItemDisplay, \"NXalHpKzpAP19DoMzTgfXIaddi4=\");\n\n_c2 = ListsItemDisplay;\n\nfunction Lists(props) {\n  _s2();\n\n  const [showAlert, setShowAlert] = useState(false);\n  const [currentTasks, setTasks] = useState([]);\n\n  function updateListItems(newListItems) {\n    props.setData(props.data.map(list => {\n      if (list.id === props.list.id) {\n        list.listItems = newListItems;\n      }\n\n      return list;\n    }));\n  }\n\n  if (!props.fetch) {\n    props.getDocInfo(props.list.id).then(x => setTasks(x));\n    props.setFetch(true);\n  }\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [console.log(\"hi\"), /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: props.data[0].title\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 13\n    }, this), currentTasks.map(x => /*#__PURE__*/_jsxDEV(ListsItemDisplay, {\n      setTasks: setTasks,\n      currentTasks: currentTasks,\n      list: props.list,\n      setData: props.setData,\n      data: props.data,\n      id: x[0],\n      listitem: x[1],\n      completed: x[2]\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 38\n    }, this)), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"button1\",\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => {\n          setShowAlert(true);\n        },\n        className: \"addTask\",\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          src: \"plus-solid.svg\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          children: \"Add Task\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Alert, {\n      visible: showAlert,\n      onClose: () => setShowAlert(false),\n      onOk: input => props.addListItem(props.list, input),\n      cancelName: \"Don't Add Task\",\n      okName: \"Add Task\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        children: \"Add Task:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n}\n\n_s2(Lists, \"V2sC7RMMDOk+F5j24/GBH9lfqmM=\");\n\n_c3 = Lists;\nexport default Lists;\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"ShowEditAlert\");\n$RefreshReg$(_c2, \"ListsItemDisplay\");\n$RefreshReg$(_c3, \"Lists\");","map":{"version":3,"sources":["/Users/laurenwest/code/cs124/src/Lists.js"],"names":["Data","React","useEffect","useState","useMemo","Alert","useCollection","collection","doc","setDoc","query","where","getDoc","getDocs","firebase","ShowEditAlert","props","setCurrentTask","listitem","id","setShowEditAlert","readASingleDocument","docname","mySnapshot","exists","docData","data","ListsItemDisplay","console","log","currentTasks","checked","setChecked","completed","showAlert","setShowAlert","handleAlertOKListItem","listItemText","text","setData","Object","assign","e","handleTaskDelete","Lists","setTasks","updateListItems","newListItems","map","list","listItems","fetch","getDocInfo","then","x","setFetch","title","input","addListItem"],"mappings":"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","sourcesContent":["import \"./main.css\"\nimport {Data} from \"./InMemoryApp\"\nimport React, {useEffect, useState, useMemo} from \"react\";\nimport Alert from \"./Alert\";\nimport {useCollection} from \"react-firebase-hooks/firestore\";\nimport {collection, doc, setDoc, query, where, getDoc, getDocs} from \"firebase/firestore\";\nimport firebase from \"firebase/compat\";\n\nfunction ShowEditAlert(props) {\n    props.setCurrentTask(props.listitem.id)\n    props.setShowEditAlert(true)\n}\n\nasync function readASingleDocument(docname){\n    const mySnapshot = await getDoc(docname);\n    if (mySnapshot.exists()){\n        const docData = mySnapshot.data();\n        return docData;\n    }\n    return 0;\n}\n\n\nfunction ListsItemDisplay(props){\n    console.log(props.currentTasks);\n    const [checked, setChecked] = useState(props.completed); //useState(props.listitem.completed)\n    const [showAlert, setShowAlert] = useState(false);\n\n    function handleAlertOKListItem(listItemText) {\n        props.listitem.text = listItemText;\n        props.setData(Object.assign([], props.data))\n    }\n    // function handleDelete(e) {\n    //     e.stopPropagation()\n    //     props.list.listItems = props.list.listItems.filter((item) => item.id !== props.id)\n    //     props.setData(Object.assign([], props.data))\n    // }\n\n    return (\n        <div id=\"box1\" className=\"boxes boxes-blue\">\n            <input checked={checked} type=\"checkbox\" onChange={() => {\n                // props.listitem.completed = !props.listitem.completed\n                // setChecked(props.listitem.completed)\n                // props.setData(Object.assign([], props.data))\n                console.log(\"add completed attribute\")\n            }}/>\n            <label>{props.listitem}</label><br/>\n            <div className={\"edit-delete-button-container\"}>\n            <img className=\"edit-delete-button\" onClick={() => setShowAlert(true)} src={\"edit-solid.svg\"}></img>\n            <img className=\"edit-delete-button\" onClick={(e) => props.handleTaskDelete(e)} src={\"times-solid.svg\"}></img>\n            </div>\n            <Alert visible={showAlert} inputValue={props.listitem} onClose={() => setShowAlert(false)} onOk={handleAlertOKListItem} cancelName={\"Don't Edit Task\"} okName={\"Edit Task\"}>\n                <div>Edit Task:</div>\n            </Alert>\n        </div>\n    )\n}\n\nfunction Lists(props) {\n    const [showAlert, setShowAlert] = useState(false);\n    const [currentTasks, setTasks] = useState([]);\n\n    function updateListItems(newListItems) {\n        props.setData(props.data.map(list => {\n            if (list.id === props.list.id) {\n                list.listItems = newListItems\n            }\n            return list;\n        }))\n    }\n\n    if (!props.fetch) {\n        props.getDocInfo(props.list.id).then((x) => setTasks(x));\n        props.setFetch(true);\n    }\n\n    return (\n        <>\n            {console.log(\"hi\")}\n            <h1>{props.data[0].title}</h1>\n            {currentTasks.map((x) => <ListsItemDisplay setTasks={setTasks} currentTasks={currentTasks} list={props.list} setData={props.setData} data={props.data} id={x[0]} listitem={x[1]} completed={x[2]}/>)}\n            {/*{for (x of liststuff) <ListsItemDisplay list={props.list} key={0} setData={props.setData} data={props.data} listitem={x}/>}*/}\n            {/*{currentTasks.map((y) => <ListsItemDisplay list={props.list} key={y.id} setData={props.setData} data={props.data} listitem={y}/>)}*/}\n\n            {/*<ListsItemDisplay list={props.data[0]} key={props.data[0].id} setData={props.setData} data={props.data} listitem={\"Call me\"}/>*/}\n\n            {/*{props.list.collection(\"Tasks\")[0]}*/}\n            {/*props.list.collection(\"Tasks\").*/}\n            {/*.filter((x) => !x.completed)*/}\n            {/*.map((y) => <ListsItemDisplay list={props.list} key={y.id} setData={props.setData} data={props.data} listitem={y}/>)}*/}\n            {/*<p>{props.data[0]}</p>*/}\n            {/*{*/}\n            {/*.filter((x) => !x.completed)*/}\n            {/*{ props.list.collection(\"Tasks\").map((y) => <ListsItemDisplay list={props.list.collection(\"Tasks\")} key={y.id} setData={props.setData} data={props.data} listitem={y}/>)}*/}\n            {/*<hr/>*/}\n            {/*<h3>Completed:</h3>*/}\n            {/*{*/}\n            {/*{*/}\n            {/*props.list.listItems*/}\n            {/*    .filter((x) => x.completed)*/}\n            {/*    .map((y) => <ListsItemDisplay list={props.list} key={y.id} setData={props.setData} data={props.data} listitem={y}/>)}*/}\n            <div id=\"button1\">\n                <button onClick={() => {setShowAlert(true)}} className=\"addTask\">\n                    <img src=\"plus-solid.svg\"/>\n                    <span>Add Task</span>\n                </button>\n            </div>\n            <Alert visible={showAlert}  onClose={() => setShowAlert(false)} onOk={(input) => props.addListItem(props.list, input) } cancelName={\"Don't Add Task\"} okName={\"Add Task\"}>\n                <div>Add Task:</div>\n            </Alert>\n        </>\n    )\n}\n\nexport default Lists;"]},"metadata":{},"sourceType":"module"}